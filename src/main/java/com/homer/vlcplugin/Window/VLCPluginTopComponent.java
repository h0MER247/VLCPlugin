package com.homer.vlcplugin.Window;

import com.homer.vlcplugin.Model.NavigationModel;
import com.homer.vlcplugin.Model.VideoModel;
import com.homer.vlcplugin.Util.DragAndDrop.FileDropTarget;
import com.homer.vlcplugin.View.DiscoveryErrorView;
import com.homer.vlcplugin.View.NavigationView;
import com.homer.vlcplugin.View.VideoView;
import com.homer.vlcplugin.ViewModel.NavigationViewModel;
import com.homer.vlcplugin.ViewModel.VideoViewModel;
import java.io.File;
import java.util.List;
import java.util.Properties;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import uk.co.caprica.vlcj.discovery.NativeDiscovery;



/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.homer.vlcplugin.Window//VLCPlugin//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "VLCPluginTopComponent",
        iconBase = "com/homer/vlcplugin/vlc.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "navigator", openAtStartup = true)
@ActionID(category = "Window", id = "com.homer.vlcplugin.Window.VLCPluginTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_VLCPluginAction",
        preferredID = "VLCPluginTopComponent"
)
@Messages({
    "CTL_VLCPluginAction=VLC Plugin",
    "CTL_VLCPluginTopComponent=VLC Plugin",
    "HINT_VLCPluginTopComponent="
})



public final class VLCPluginTopComponent extends TopComponent {
    
    private NavigationView m_navigationView;
    private NavigationModel m_navigationModel;
    private NavigationViewModel m_navigationViewModel;
    
    private VideoView m_videoView;
    private VideoModel m_videoModel;
    private VideoViewModel m_videoViewModel;
    
    private final boolean m_isVLCDiscovered;
    
    
    
    public VLCPluginTopComponent() {
        
        initComponents();
        setName(Bundle.CTL_VLCPluginTopComponent());
        setToolTipText(Bundle.HINT_VLCPluginTopComponent());
        
        m_isVLCDiscovered = new NativeDiscovery().discover();
        
        if(m_isVLCDiscovered) {
        
            // Init views, models and view-models
            m_navigationView = new NavigationView();
            m_navigationModel = new NavigationModel();
            m_navigationViewModel = new NavigationViewModel(m_navigationView, m_navigationModel);

            m_videoView = new VideoView();
            m_videoModel = new VideoModel();
            m_videoViewModel = new VideoViewModel(m_videoView, m_videoModel, m_navigationModel);

            // Add the navigation view to the bottom panel
            m_bottomPanel.add(m_navigationView);
            m_topPanel.add(m_videoView);

            // Init file drag and drop targets
            FileDropTarget.setAsFileDropTarget(m_videoView, this::onFilesDropped);
            FileDropTarget.setAsFileDropTarget(m_navigationView, this::onFilesDropped);
        }
        else {
            
            m_topPanel.add(new DiscoveryErrorView());
        }
    }
    
    private void onFilesDropped(List<File> files) {
        
        // Play the first dropped file
        m_navigationModel.playMedia(files.get(0).toString());
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        m_topPanel = new javax.swing.JPanel();
        m_bottomPanel = new javax.swing.JPanel();

        m_topPanel.setLayout(new java.awt.CardLayout());

        m_bottomPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(m_topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(m_bottomPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(m_topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(m_bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel m_bottomPanel;
    private javax.swing.JPanel m_topPanel;
    // End of variables declaration//GEN-END:variables
    
    
    
    @Override
    public void componentOpened() {
    }
    
    @Override
    public void componentClosed() {
        
        if(!m_isVLCDiscovered)
            return;
        
        if(m_navigationModel.isPlaying())
            m_navigationModel.stop();

        m_videoModel.release();
        m_navigationModel.release();
    }
    
    @Override
    protected void componentShowing() {
        
        if(!m_isVLCDiscovered)
            return;
        
        m_navigationModel.setMediaPlayer(m_videoModel.getMediaPlayer());
        repaint();
    }

    @Override
    protected void componentHidden() {
        
        if(!m_isVLCDiscovered)
            return;
        
        if(m_navigationModel.isPlaying())
            m_navigationModel.pause();
    }
    
    
    
    void writeProperties(Properties p) {
        
        //p.setProperty("version", "1.0");
    }

    void readProperties(Properties p) {
        
        //String version = p.getProperty("version");
    }
}
